#!/bin/bash
#PBS -N ime-qe
#PBS -l select=2:ncpus=24:mpiprocs=24:ompthreads=1:mem=64gb 
#PBS -l walltime=1:00:00
###PBS -j oe
#PBS -P Personal

# The IME is not mounted on the login nodes
# Therefore you can't prestage the files on the login nodes

# The input files for this example are small so we can copy them to the
# right place from /home at the start of the job 
# If the dataset is large then move or copy it into /scratch/ime before
# running the job

cd $PBS_O_WORKDIR || exit $?
# Input files are in this directory:
input_dir=$PWD/input

# User IME directory follows the pattern of '$HOME' with /home replaced with /ime
IMEDIR=${HOME/home/ime}
# The backing directory for /ime is in /scratch/ime
BACKDIR=/scratch${IMEDIR}
# The directory in the IME namespace is the name without the /ime at the start:
URI="ime://${IMEDIR#/ime/}"

# Directory where the job is going to be run
#  in backend Lustre filesysystem:
staging=$BACKDIR/$PBS_JOBID
#  in the IME:
rundir=$IMEDIR/$PBS_JOBID
#  with name in IME namespace:
runime=$URI/$PBS_JOBID

# Copy the files into Lustre (can be done on the login node before running the job):
rsync -a --delete $input_dir/ $staging/

# Change directory to IME
cd $rundir || exit $?
pwd

# Stage the files into the IME (has to be done on a compute node with IME mounted):
# Blocking with -b option because we need the files immediately
# As these files are small we could skip this step and read files directly from Lustre
# To prestage a whole directory use the -r (recursive) flag
ime-prestage -b -r $runime/

# Get status of all files in directory
ime-stat -r $runime/

# Run the job
inputfile=ausurf.in
module load quantum-espresso
#  job writes output files in current directory to IME
#  standard output directed to the staging directory in Lustre (so it is not cached)
mpirun pw.x -i $inputfile > $staging/stdout.$PBS_JOBID 2> stderr.$PBS_JOBID

# sync the files back to Lustre
#  non-blocking (no -b flag) so job can exit immediately
#  using -r to sync the whole directory
echo syncing data back to $staging
ime-sync -r $runime/
